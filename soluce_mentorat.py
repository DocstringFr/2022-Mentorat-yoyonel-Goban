"""
2022-06-28:
    - ‚úîÔ∏è strat√©gie simple (non r√©cursive) et directe pour passer les premiers tests unitaires
    - ‚úî par "chance" le test `test_square_shape_is_taken`,
        car il n'y aucune libert√© pour la forme (aucune de ces pi√®ces)
        donc la r√©cursivit√© n'est pas n√©cessaire
    - ‚ùå le test unitaire `test_black_shape_is_not_taken_when_it_has_a_liberty`
        sur la forme avec une libert√© sur une des pi√®ces ne fonctionne pas (normal)
"""
from typing import List

from goban import Goban, Status


class SolutionMentoratGoban(Goban):
    def __init__(self, goban: List[str]):
        super().__init__(goban)

    def is_taken(self, x: int, y: int, positions=None) -> bool:
        """
        si la pierre √† une position x, y sur un goban est prise ou pas
        """
        # 1√®re √©tape: ‚ùì Est ce que la position (x, y) est sur une pierre ou pas ‚ùì
        status_position = self.get_status(x, y)

        if status_position == Status.EMPTY or status_position == Status.OUT:
            return False

        # Initialisation de l'historique des positions test√©es et de l'√©tat de la forme
        if positions is None:
            positions = []
            self.shape_is_free = False

        # 2√®me √©tape: ‚ùì Est une position adjacente est libre ‚ùì
        status_positions_adjacentes = [
            (self.get_status(x + 1, y), (x + 1, y)),  # position adjacente ‚û° droite
            (self.get_status(x - 1, y), (x - 1, y)),  # position adjacente ‚¨Ö gauche
            (self.get_status(x, y + 1), (x, y + 1)),  # position adjacente ‚¨á bas
            (self.get_status(x, y - 1), (x, y - 1)),  # position adjacente ‚¨Ü haute
        ]
        # üîÆ Est ce qu'une position adjacente est libre ‚ùì
        for status_position_adjacente in status_positions_adjacentes:
            # ‚ùì Est ce que la position adjacente est libre ‚ùì
            if status_position_adjacente[0] == Status.EMPTY:
                # ‚úÖ si oui la piece (x, y) est libre et donc la forme est libre
                self.shape_is_free = True
            # ‚ùì Sinon, est ce que les positions adjacentes de la position actuelle sont libres ‚ùì
            # On test une position adjacente seulement si:
            # - Aucune position libre d√©j√† trouv√©e (√©vite de continuer la recherche)
            # - Pas d√©j√† test√©
            # - La position actuelle est de la couleur de la position adjacente
            elif self.shape_is_free == False and \
                    (x, y) not in positions and \
                    status_position == status_position_adjacente[0]:
                # Ajout de la position √† l'historique
                positions.append((x, y))
                # Appel r√©cursif de la m√©thode avec nouvelle position et historique des positions test√©es
                self.is_taken(status_position_adjacente[1][0], status_position_adjacente[1][1], positions=positions)

        # Retourne que la pi√®ce est prise si la forme n'a pas de libert√©
        return not self.shape_is_free
